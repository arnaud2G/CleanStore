//
//  ListOrdersPresenterTests.swift
//  CleanStore
//
//  Created by Arnaud Verrier on 28/09/2018.
//  Copyright (c) 2018 tagattitude. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanStore
import XCTest

class ListOrdersPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListOrdersPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListOrdersPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListOrdersPresenter()
    {
        sut = ListOrdersPresenter()
    }
    
    // MARK: Test doubles
    
    class ListOrdersDisplayLogicSpy: ListOrdersDisplayLogic
    {
        var displayFetchOrdersCalled = false
        
        var listOrdersModelView:ListOrders.FetchOrders.ViewModel!
        
        func displayFetchOrders(viewModel: ListOrders.FetchOrders.ViewModel) {
            
            displayFetchOrdersCalled = true
            listOrdersModelView = viewModel;
        }
    }
    
    // MARK: Tests
    func testPresentFetchedOrdersShouldFormatFetchedOrdersForDisplay()
    {
        // Given
        let listOrdersPresenterOutputSpy = ListOrdersDisplayLogicSpy()
        sut.viewController = listOrdersPresenterOutputSpy;
        
        var dateComponents = DateComponents()
        dateComponents.year = 2007
        dateComponents.month = 6
        dateComponents.day = 29
        let date = Calendar.current.date(from: dateComponents)
        
        let orders = [Order(id: "abc123", date: date!, email: "amy.apple@clean-swift.com", firstName: "Amy", lastName: "Apple", total: NSDecimalNumber(string: "1.23"))]
        
        let response = ListOrders.FetchOrders.Response(orders:orders)
        
        // When
        sut.presentFetchOrder(response: response);
        
        // Then
        let displayedOrders = listOrdersPresenterOutputSpy.listOrdersModelView.displayedOrders
        for displayedOrder in displayedOrders{
            XCTAssertEqual(displayedOrder.id, "abc123", "Presenting fetched orders should properly format order ID")
            XCTAssertEqual(displayedOrder.date, "6/29/07", "Presenting fetched orders should properly format order date")
            XCTAssertEqual(displayedOrder.email, "amy.apple@clean-swift.com", "Presenting fetched orders should properly format email")
            XCTAssertEqual(displayedOrder.name, "Amy Apple", "Presenting fetched orders should properly format name")
            XCTAssertEqual(displayedOrder.total, "$1.23", "Presenting fetched orders should properly format total")
        }
    }
    
    func testPresentFetchedOrdersShouldCallDisplayFetchOrders()
    {
        // Given
        let spy = ListOrdersDisplayLogicSpy()
        sut.viewController = spy
        
        var dateComponents = DateComponents()
        dateComponents.year = 2007
        dateComponents.month = 6
        dateComponents.day = 29
        let date = Calendar.current.date(from: dateComponents)
        
        let orders = [Order(id: "abc123", date: date!, email: "amy.apple@clean-swift.com", firstName: "Amy", lastName: "Apple", total: NSDecimalNumber(string: "1.23"))]
        
        let response = ListOrders.FetchOrders.Response(orders:orders)
        
        // When
        sut.presentFetchOrder(response: response);
        
        // Then
        XCTAssertTrue(spy.displayFetchOrdersCalled, "fetchOrders(response:) should ask the view controller to display the result")
    }
}
