//
//  OrderWorkerTests.swift
//  CleanStore
//
//  Created by Arnaud Verrier on 28/09/2018.
//  Copyright (c) 2018 tagattitude. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanStore
import XCTest

class OrderWorkerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: OrdersWorker!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupOrderWorker()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupOrderWorker()
    {
    }
    
    // MARK: Test doubles
    class OrdersMemStoreSpy: OrdersMemStore
    {
        // MARK: Method call expectations
        var fetchedOrdersCalled = false
        
        // MARK: Spied methods
        override func fetchOrders(completionHandler: @escaping (_ orders: [Order]) -> Void)
        {
            fetchedOrdersCalled = true
            
            var dateComponents = DateComponents()
            dateComponents.year = 2007
            dateComponents.month = 6
            dateComponents.day = 29
            let date = Calendar.current.date(from: dateComponents)
            
            DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(1)) {
                completionHandler([Order(id: "abc123", date: date!, email: "amy.apple@clean-swift.com", firstName: "Amy", lastName: "Apple", total: NSDecimalNumber(string: "1.23")), Order(id: "abc123", date: date!, email: "amy.apple@clean-swift.com", firstName: "Amy", lastName: "Apple", total: NSDecimalNumber(string: "1.23"))])
            }
        }
    }
    
    // MARK: Tests
    
    func testSomething()
    {
        // Given
        let spy = OrdersMemStoreSpy()
        sut = OrdersWorker(ordersStore: spy)
        
        // When
        let expect = expectation(description: "Wait for fetched orders result")
        sut.fetchOrders { (orders: [Order]) -> Void in
            expect.fulfill()
        }
        
        // Then
        XCTAssert(spy.fetchedOrdersCalled, "Calling fetchOrders() should ask the data store for a list of orders")
        waitForExpectations(timeout: 1.1) { (error: Error?) in
            
            XCTAssert(true, "Calling fetchOrders() should result in the completion handler being called with the fetched orders result")
        }
    }
}
